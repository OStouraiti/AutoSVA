// This property file was autogenerated by AutoSVA on 2024-04-05
// to check the behavior of the original RTL module, whose interface is described below: 


`include "imuldiv-MulDivReqMsg.v"
`include "imuldiv-IntMulIterative.v"
`include "imuldiv-IntDivIterative.v"

module imuldiv_IntMulDivIterative_prop
#(
		parameter ASSERT_INPUTS = 0)
(
		input         clk,
		input         reset,
		
		input   [2:0] muldivreq_msg_fn,
		input  [31:0] muldivreq_msg_a,
		input  [31:0] muldivreq_msg_b,
		input         muldivreq_val,
		input         muldivreq_rdy, //output
		
		input  [63:0] muldivresp_msg_result, //output
		input         muldivresp_val, //output
		input         muldivresp_rdy
	);

//==============================================================================
// Local Parameters
//==============================================================================

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (reset);

// Re-defined wires 

// Symbolics and Handshake signals
wire muldivresp_hsk = muldivresp_val && muldivresp_rdy;
wire muldivreq_hsk = muldivreq_val && muldivreq_rdy;

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for trans
if (ASSERT_INPUTS) begin
	as__trans_fairness: assert property (muldivresp_val |-> s_eventually(muldivresp_rdy));
end else begin
	am__trans_fairness: assume property (muldivresp_val |-> s_eventually(muldivresp_rdy));
end

// Generate sampling signals and model
reg [3:0] trans_transid_sampled;
wire trans_transid_set = muldivreq_hsk;
wire trans_transid_response = muldivresp_hsk;

always_ff @(posedge clk) begin
	if(reset) begin
		trans_transid_sampled <= '0;
	end else if (trans_transid_set || trans_transid_response ) begin
		trans_transid_sampled <= trans_transid_sampled + trans_transid_set - trans_transid_response;
	end
end
co__trans_transid_sampled: cover property (|trans_transid_sampled);
if (ASSERT_INPUTS) begin
	as__trans_transid_sample_no_overflow: assert property (trans_transid_sampled != '1 || !trans_transid_set);
end else begin
	am__trans_transid_sample_no_overflow: assume property (trans_transid_sampled != '1 || !trans_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__trans_transid_hsk_or_drop: assert property (muldivreq_val |-> s_eventually(!muldivreq_val || muldivreq_rdy));
// Assert that every request has a response and that every reponse has a request
as__trans_transid_eventual_response: assert property (|trans_transid_sampled |-> s_eventually(muldivresp_val));
as__trans_transid_was_a_request: assert property (trans_transid_response |-> trans_transid_set || trans_transid_sampled);


//X PROPAGATION ASSERTIONS
`ifdef XPROP
`endif

//====DESIGNER-ADDED-SVA====//

endmodule